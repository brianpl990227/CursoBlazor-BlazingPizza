@page "/"
@inject HttpClient client
@inject NavigationManager navigation

 @if (Specials != null)
{
    <div class="main">

        <ul class="pizza-cards">
            @foreach (var Special in Specials)
            {
                <li @onclick="@(() => ShowConfigurePizzaDialog(Special))" style="background-image:url('@Special.ImageURL')">
                    <div class="pizza-info">
                        <span class="title">
                            @Special.Name
                        </span>
                        @Special.Description
                        <span class="price">
                            @Special.GetFormattedBasePrice()
                        </span>
                    </div>
                </li>
            }
        </ul>
    </div>

    <div class="sidebar">
        @if(order.Pizzas.Any())
        {
            <div class="order-contents">
                <h2>Tu orden</h2>
                @foreach(var ConfiguredPizza in order.Pizzas)
                {
                    
                    <ConfiguredPizzaItem Pizza="@ConfiguredPizza" 
                        OnRemoved="@(() => RemoveConfiguredPizza(ConfiguredPizza))"/>
                }

            </div>            
        }
        else
        {
            <div class="empty-cart">Selecciona una pizza<br/> para empezar</div>
        }

        <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
            Total:
            <span class="total-price">
                @order.GetFormattedTotalPrice()
            </span>
            <button class="btn btn-warning" disabled="@(order.Pizzas.Count() == 0)" @onclick="@PlaceOrder">
                Ordenar
            </button>
        </div>
    </div>

}
else
{
    <h1>CargandoPizzas</h1>
}

@if (ShowingConfigurePizza)
{
    <ConfigurePizzaDialog pizza="ConfiguringPizza" OnConfirm="ConfirmConfigurePizzaDialog" OnCancel="CancelConfigurePizzaDialog"/>
}

@code {
    List<PizzaSpecial> Specials;
    Pizza ConfiguringPizza;
    bool ShowingConfigurePizza;
    Order order = new Order();

    protected async override Task OnInitializedAsync()
    {
        Specials = await client.GetFromJsonAsync<List<PizzaSpecial>>("specials");
    }

    void ShowConfigurePizzaDialog(PizzaSpecial special)
    {
        ConfiguringPizza = new Pizza
            {
                Special = special,
                SpecialId = special.Id,
                Size = Pizza.DefaultSize,
                Toppings = new List<PizzaTopping>()
            };
        ShowingConfigurePizza = true;
    }

    void CancelConfigurePizzaDialog()
    {
        ConfiguringPizza = null;
        ShowingConfigurePizza = false;
    }

    void ConfirmConfigurePizzaDialog()
    {
        order.Pizzas.Add(ConfiguringPizza);
        ConfiguringPizza = null;
        ShowingConfigurePizza = false;
    }

    void RemoveConfiguredPizza(Pizza pizza)
    {
        order.Pizzas.Remove(pizza);
    }

    async Task PlaceOrder()
    {

        var response = await client.PostAsJsonAsync("orders", order);
        var NewOrderId = await response.Content.ReadFromJsonAsync<int>();
        order = new Order();

        navigation.NavigateTo($"myorders/{NewOrderId}");

    }

}