@page "/"
@inject HttpClient client
@inject NavigationManager navigation
@inject OrderState OrderState

 @if (Specials != null)
{
    <div class="main">

        <ul class="pizza-cards">
            @foreach (var Special in Specials)
            {
                <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(Special))" style="background-image:url('@Special.ImageURL')">
                    <div class="pizza-info">
                        <span class="title">
                            @Special.Name
                        </span>
                        @Special.Description
                        <span class="price">
                            @Special.GetFormattedBasePrice()
                        </span>
                    </div>
                </li>
            }
        </ul>
    </div>

    <div class="sidebar">
        @if (OrderState.order.Pizzas.Any())
        {
            <div class="order-contents">
                <h2>Tu orden</h2>
                @foreach (var ConfiguredPizza in OrderState.order.Pizzas)
                {

                    <ConfiguredPizzaItem Pizza="@ConfiguredPizza"
                             OnRemoved="@(() => OrderState.RemoveConfiguredPizza(ConfiguredPizza))" />
                }

            </div>
        }
        else
        {
            <div class="empty-cart">Selecciona una pizza<br /> para empezar</div>
        }

        <div class="order-total @(OrderState.order.Pizzas.Any() ? "" : "hidden")">
            Total:
            <span class="total-price">
                @OrderState.order.GetFormattedTotalPrice()
            </span>

            <a href="checkout" class="btn btn-warning" disabled="@(OrderState.order.Pizzas.Count() == 0)">
                Ordenar
            </a>
        </div>
    </div>

}
else
{
    <h1>CargandoPizzas</h1>
}

@if (OrderState.ShowingConfigurePizza)
{
    <ConfigurePizzaDialog pizza="OrderState.ConfiguringPizza" OnConfirm="OrderState.ConfirmConfigurePizzaDialog" OnCancel="OrderState.CancelConfigurePizzaDialog" />
}

@code {

    List<PizzaSpecial> Specials;

    protected async override Task OnInitializedAsync()
    {
        Specials = await client.GetFromJsonAsync<List<PizzaSpecial>>("specials");
    }

}